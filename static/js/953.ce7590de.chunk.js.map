{"version":3,"file":"static/js/953.ce7590de.chunk.js","mappings":"mUAEaA,EAAQC,EAAAA,GAAAA,GAAH,ybAkBLC,EAAQD,EAAAA,GAAAA,GAAH,uTAQLE,EAAQF,EAAAA,GAAAA,IAAH,0JASLG,EAAUH,EAAAA,GAAAA,IAAH,4CAIPI,EAAOJ,EAAAA,GAAAA,EAAH,yEAKJK,EAAYL,EAAAA,GAAAA,IAAH,+F,kJC5CTG,EAAUH,EAAAA,GAAAA,IAAH,iEAKPM,EAAgBN,EAAAA,GAAAA,IAAH,qEAKbO,EAASP,EAAAA,GAAAA,GAAH,gDAINQ,EAAOR,EAAAA,GAAAA,EAAH,0L,mBCyBjB,EAlCe,WACX,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAWA,OAVAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAcN,GACTO,MAAK,SAAAC,GACGA,EAAKC,SAGVL,EAAUI,EAAKC,cAExB,CAACT,KAGA,iCACI,mBACA,SAAC,KAAD,UACuB,IAAlBG,EAAOO,OACFP,EAAOQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,UAACpB,EAAD,YACI,UAACG,EAAD,YACI,2BAAM,SAAC,MAAD,OACN,SAACC,EAAD,UAASe,QAEb,SAACd,EAAD,UAAOe,MALGF,OAQhB,4E,0MChCtBG,IAAAA,SAAAA,QAAyB,+BAEzBA,IAAAA,SAAAA,OAAwB,CAAEC,QADV,oCAGT,IAAMC,EAAc,mCAAG,6GAECF,IAAAA,IAAA,uBAFD,cAEhBG,EAFgB,yBAGfA,EAASV,MAHM,gCAKtBW,QAAQC,IAAI,KAAMC,SALI,yDAAH,qDASdC,EAAY,mCAAG,WAAOV,GAAP,gGAEGG,IAAAA,IAAA,iBAAoBH,IAFvB,cAEdM,EAFc,yBAGbA,EAASV,MAHI,gCAKpBW,QAAQC,IAAI,KAAMC,SALE,yDAAH,sDASZE,EAAkB,mCAAG,WAAOC,GAAP,yFACPT,IAAAA,IAAA,8BAAiCS,IAD1B,uBACtBhB,EADsB,EACtBA,KADsB,kBAGvBA,EAAKC,SAHkB,2CAAH,sDAMlBgB,EAAU,mCAAG,WAAOzB,GAAP,yFACCe,IAAAA,IAAA,iBAAoBf,EAApB,aADD,uBACdQ,EADc,EACdA,KADc,kBAGfA,GAHe,2CAAH,sDAMVF,EAAa,mCAAG,WAAON,GAAP,yFACFe,IAAAA,IAAA,iBAAoBf,EAApB,aADE,uBACjBQ,EADiB,EACjBA,KADiB,kBAGlBA,GAHkB,2CAAH","sources":["components/Cast/Cast.styled.js","components/Review/Review.styled.js","components/Review/Review.js","services/fakeApi.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Links = styled.ul`\n    // display: flex;\n    // flex-wrap: wrap;\n    // //justify-content: center;\n    // padding: 0px 30px;\n    // margin: -8px;\n    display: grid;\n    //max-width: calc(100vw -48px);\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 16px;\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 20px 16px;\n    list-style: none;\n    margin-left: auto;\n    margin-right: auto;\n`\n\nexport const Items = styled.li`\n    // box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n    // list-style: none;\n    // margin: 8px;\n    // border-radius: 4px;\n    border-radius: 2px;\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\nexport const Image = styled.img`\n    // width: 100%;\n    // display: block;\n    // height: 300px;\n    width: 100%;\n    height: 300px;\n    object-fit: cover;\n`;\n\nexport const Content = styled.div`\n    padding: 15px;\n`;\n\nexport const Name = styled.p`\n    font-weight: 500;\n    margin-bottom: 10px;\n`;\n\nexport const Container = styled.div`\n    // max-width: 1145px;\n    margin: 0 auto;\n    padding: 0 16px;\n`;","import styled from \"styled-components\";\n\nexport const Content = styled.div`\n    margin-left: 40px;\n    width: 75%;\n`;\n\nexport const ContentAuthor = styled.div`\n    display:flex;\n    align-items: center;\n`;\n\nexport const Author = styled.h4`\n    padding-left: 4px;\n`;\n\nexport const Text = styled.p`\n    color: #575757; \n    font-family: 'Droid Sans', sans-serif; \n    font-size: 15px; font-weight: 400; \n    line-height: 24px; \n    margin: 0 0 14px;\n    \n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReveiwsAPI } from '../../services/fakeApi';\nimport { Container } from '../Cast/Cast.styled';\nimport { Content, ContentAuthor, Author, Text } from './Review.styled';\nimport { BsFillPeopleFill } from \"react-icons/bs\";\n\nconst Review = () => {\n    const { movieId } = useParams();\n    const [review, setReview] = useState([]);\n    useEffect(() => {\n        getReveiwsAPI(movieId)\n            .then(data => {\n                if (!data.results) {\n                    return;\n                }\n                setReview(data.results)\n            })\n    }, [movieId])\n\n    return (\n        <>\n            <hr />\n            <Container>\n                {review.length !== 0\n                    ? review.map(({ id, author, content }) => (\n                        <Content key={id}>\n                            <ContentAuthor>\n                                <span><BsFillPeopleFill /></span>\n                                <Author>{author}</Author>\n                            </ContentAuthor>\n                            <Text>{content}</Text>\n                        </Content>\n                    ))\n                    : <p>We don't have any reviews for this movie.</p>\n                }\n            </Container>\n        </>\n    )\n}\n\nexport default Review;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '2755fba3e929303148b2d926b9a7bf84';\naxios.defaults.params = { api_key: API_KEY };\n\nexport const getTrandingAPI = async () => {\n    try {\n        const response = await axios.get(`/trending/movie/day`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n};\n\nexport const getMoviesAPI = async (id) => {\n    try {\n        const response = await axios.get(`/movie/${id}`);\n        return response.data;\n    } catch (error) {\n        console.log(error.message);\n    }\n};\n\nexport const getSearchMoviesAPI = async (query) => {\n    const { data } = await axios.get(`/search/movie?query=${query}`);\n\n    return data.results;\n};\n\nexport const getCastAPI = async (movieId) => {\n    const { data } = await axios.get(`/movie/${movieId}/credits`);\n\n    return data;\n};\n\nexport const getReveiwsAPI = async (movieId) => {\n    const { data } = await axios.get(`/movie/${movieId}/reviews`);\n\n    return data;\n};\n\n\n"],"names":["Links","styled","Items","Image","Content","Name","Container","ContentAuthor","Author","Text","movieId","useParams","useState","review","setReview","useEffect","getReveiwsAPI","then","data","results","length","map","id","author","content","axios","api_key","getTrandingAPI","response","console","log","message","getMoviesAPI","getSearchMoviesAPI","query","getCastAPI"],"sourceRoot":""}